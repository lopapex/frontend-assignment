/* tslint:disable */
/* eslint-disable */
/**
 * Todo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    Tokens,
    TokensFromJSON,
    TokensToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface LoginUserRequest {
    user: User;
}

export interface RefreshTokenRequest {
    inlineObject: InlineObject;
}

export interface RegisterUserRequest {
    user: User;
}

/**
 * no description
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * User login
     */
    async loginUserRaw(requestParameters: LoginUserRequest): Promise<runtime.ApiResponse<Tokens>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling loginUser.');
        }
        
        
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(unescape(encodeURIComponent(this.configuration.username + ":" + this.configuration.password)));
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokensFromJSON(jsonValue));
    }

    /**
     * User login
     */
    async loginUser(requestParameters: LoginUserRequest): Promise<Tokens> {
        const response = await this.loginUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Refresh the access token using a valid refresh token.
     * Refresh Access Token
     */
    async refreshTokenRaw(requestParameters: RefreshTokenRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.inlineObject === null || requestParameters.inlineObject === undefined) {
            throw new runtime.RequiredError('inlineObject','Required parameter requestParameters.inlineObject was null or undefined when calling refreshToken.');
        }
        
        
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(unescape(encodeURIComponent(this.configuration.username + ":" + this.configuration.password)));
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/refresh-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Refresh the access token using a valid refresh token.
     * Refresh Access Token
     */
    async refreshToken(requestParameters: RefreshTokenRequest): Promise<InlineResponse200> {
        const response = await this.refreshTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Register a new user
     */
    async registerUserRaw(requestParameters: RegisterUserRequest): Promise<runtime.ApiResponse<Tokens>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling registerUser.');
        }
        
        
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(unescape(encodeURIComponent(this.configuration.username + ":" + this.configuration.password)));
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokensFromJSON(jsonValue));
    }

    /**
     * Register a new user
     */
    async registerUser(requestParameters: RegisterUserRequest): Promise<Tokens> {
        const response = await this.registerUserRaw(requestParameters);
        return await response.value();
    }

}
